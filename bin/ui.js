// Generated by CoffeeScript 1.3.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if ((_ref = this.LSC) == null) {
    this.LSC = {};
  }

  this.LSC.Toolbar = (function() {

    function Toolbar(paper) {
      this.paper = paper;
      this.getTitle = __bind(this.getTitle, this);

      this.setTitle = __bind(this.setTitle, this);

      this.hoverOut = __bind(this.hoverOut, this);

      this.hoverIn = __bind(this.hoverIn, this);

      this.unedit = __bind(this.unedit, this);

      this.edit = __bind(this.edit, this);

      this.addButton = __bind(this.addButton, this);

      this.update = __bind(this.update, this);

      this.bg = this.paper.rect(0, 0, "100%", cfg.toolbar.height);
      this.bg.attr({
        fill: "#aaa",
        "stroke": "none"
      });
      this.paper.rect(0, cfg.toolbar.height, "100%", 1).attr({
        stroke: "none",
        fill: "#999"
      });
      this.title = this.paper.text(cfg.margin, cfg.toolbar.height / 2, "Untitled.lsc").attr({
        "text-anchor": "start",
        font: "Verdana",
        "font-weight": "bold"
      });
      this.buttons = [];
      this.title.click(this.edit);
      this.title.hover(this.hoverIn, this.hoverOut);
    }

    Toolbar.prototype.update = function() {
      var icon, pad, x, y, _i, _len, _ref1, _results;
      pad = (cfg.toolbar.height - cfg.icon.height) / 2;
      x = y = pad;
      x += this.title.getBBox().width + pad;
      _ref1 = this.buttons;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        icon = _ref1[_i];
        icon.update(x, y);
        _results.push(x += icon.rect.getBBox().width + 2 * pad);
      }
      return _results;
    };

    Toolbar.prototype.addButton = function(button) {
      var pad, x, y;
      this.buttons.push(button);
      pad = (cfg.toolbar.height - cfg.icon.height) / 2;
      y = pad;
      x = cfg.margin + this.title.getBBox().width + cfg.margin;
      x += (cfg.icon.height + 2 * pad) * (this.buttons.length - 1);
      return button.update(x, y);
    };

    Toolbar.prototype.edit = function(event) {
      var text,
        _this = this;
      if (this.editor == null) {
        this.editor = $("<input type='text'/>");
        this.editor.css({
          left: cfg.margin,
          top: cfg.margin + 2,
          width: this.title.getBBox().width,
          background: "#ccc",
          height: 12
        });
        this.editor.addClass("editor centered");
        $("body").append(this.editor);
        text = this.title.attr("text");
        this.title.attr({
          text: "",
          opacity: 0
        });
        return this.editor.val(text).focus().select().blur(this.unedit).keypress(function(event) {
          if (event.keyCode === 13) {
            return _this.unedit();
          }
        });
      }
    };

    Toolbar.prototype.unedit = function(event) {
      var name;
      if (this.editor != null) {
        name = this.editor.val();
        if (name === "") {
          return;
        }
        this.title.attr({
          text: name,
          opacity: 1
        });
        this.editor.remove();
        this.editor = null;
      }
      return this.update();
    };

    Toolbar.prototype.hoverIn = function() {
      return this.title.attr({
        cursor: "text",
        opacity: 0.5
      });
    };

    Toolbar.prototype.hoverOut = function() {
      return this.title.attr({
        cursor: "arrow",
        opacity: 1
      });
    };

    Toolbar.prototype.setTitle = function(title) {
      this.title.attr({
        text: title
      });
      return this.update();
    };

    Toolbar.prototype.getTitle = function() {
      return this.title.attr("text");
    };

    return Toolbar;

  })();

  this.LSC.Button = (function() {

    function Button(icon, tooltip, toolbar) {
      var sf;
      this.tooltip = tooltip;
      this.toolbar = toolbar;
      this.click = __bind(this.click, this);

      this.hoverOut = __bind(this.hoverOut, this);

      this.hoverIn = __bind(this.hoverIn, this);

      this.icon = this.toolbar.paper.path(Icons[icon]);
      this.icon.attr({
        fill: "#777",
        stroke: "#fff",
        "stroke-opacity": 0
      });
      sf = cfg.icon.height / this.icon.getBBox().height;
      this.icon.scale(sf, sf, 0, 0);
      this.rect = this.toolbar.paper.rect(0, 0, this.icon.getBBox().width, cfg.icon.height);
      this.rect.attr({
        fill: "#fff",
        opacity: 0,
        title: this.tooltip,
        cursor: "pointer"
      });
      this.rect.hover(this.hoverIn, this.hoverOut);
      this.toolbar.addButton(this);
    }

    Button.prototype.update = function(x, y) {
      this.icon.moveTo(x, y);
      return this.rect.moveTo(x, y);
    };

    Button.prototype.hoverIn = function() {
      return this.icon.stop().animate({
        fill: "#333",
        "stroke-opacity": 0
      }, 100);
    };

    Button.prototype.hoverOut = function() {
      return this.icon.stop().animate({
        fill: "#777",
        "stroke-opacity": 0
      }, 200);
    };

    Button.prototype.click = function(action) {
      return this.rect.click(action);
    };

    return Button;

  })();

}).call(this);
