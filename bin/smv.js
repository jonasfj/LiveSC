// Generated by CoffeeScript 1.3.3
(function() {
  var Active, And, Assign, C, Case, Comment, Declare, Define, Definition, Eq, False, Ge, Geq, In, Init, Le, Leq, List, Loc, Module, Msg, N, Neq, Next, Op, Or, OutputSMV, P, Quite, Set, StartSMV, Started, Switch, True, V, Var, align, gbi, pad, tab, _c, _ref,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  if ((_ref = this.LSC) == null) {
    this.LSC = {};
  }

  _c = null;

  StartSMV = function() {
    if (_c !== null) {
      return false;
    }
    _c = "";
    return true;
  };

  tab = "    ";

  pad = function(str, len) {
    var i;
    str = str + "";
    return str + ((function() {
      var _i, _ref1, _results;
      _results = [];
      for (i = _i = 0, _ref1 = Math.max(0, len - 1 - str.length); 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
        _results.push(" ");
      }
      return _results;
    })()).join('');
  };

  align = 100 - 5;

  Module = function(name, params) {
    if (params.length > 0) {
      return _c += "MODULE " + name + " (" + (params.join(', ')) + ")\n\n";
    } else {
      return _c += "MODULE " + name + "\n\n";
    }
  };

  Var = function(declare) {
    _c += "VAR\n";
    declare();
    return _c += "\n";
  };

  Declare = function(name, type) {
    if (type instanceof Array) {
      type = "{" + (List(type)) + "}";
    }
    return _c += tab + ("" + (pad(name, align)) + " : " + type + ";\n");
  };

  Assign = function(assign) {
    _c += "ASSIGN\n";
    assign();
    return _c += "\n";
  };

  Define = function(definitions) {
    _c += "DEFINE\n";
    definitions();
    return _c += "\n";
  };

  Definition = function(name, expr) {
    if (expr instanceof Function) {
      expr = expr();
    }
    return _c += tab + ("" + (pad(name, align)) + " := " + expr + ";\n");
  };

  Init = function(name, expr) {
    if (expr instanceof Function) {
      expr = expr();
    }
    return _c += tab + ("init(" + (pad(name + ')', align - 5)) + " := " + expr + ";\n");
  };

  Next = function(name, expr) {
    if (expr instanceof Function) {
      if (expr.is_switch === true) {
        _c += tab + ("next(" + name + ") := ");
        expr();
        _c += "\n";
        return;
      } else {
        expr = expr();
      }
    }
    return _c += tab + ("next(" + (pad(name + ')', align - 5)) + " := " + expr + ";\n");
  };

  Quite = false;

  Comment = function(comment) {
    if (!Quite) {
      return _c += tab + ("-- " + comment + "\n");
    }
  };

  Switch = function(cases) {
    var s;
    s = function() {
      _c += "case\n";
      cases();
      return _c += tab + "esac;";
    };
    s.is_switch = true;
    return s;
  };

  Case = function(expr1, expr2) {
    if (expr1 instanceof Function) {
      expr1 = expr1();
    }
    if (expr2 instanceof Function) {
      expr2 = expr2();
    }
    return _c += tab + tab + ("" + (pad(expr1, align - 4)) + " : " + expr2 + ";\n");
  };

  Op = function(val) {
    return function(expr) {
      if (expr != null) {
        return Op(function() {
          return val() + " " + expr();
        });
      } else {
        return val();
      }
    };
  };

  Or = function(expr) {
    return Op(function() {
      var e;
      if (expr instanceof Array) {
        return ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = expr.length; _i < _len; _i++) {
            e = expr[_i];
            _results.push(e());
          }
          return _results;
        })()).join(" | ");
      }
      return "| " + expr();
    });
  };

  And = function(expr) {
    return Op(function() {
      var e;
      if (expr instanceof Array) {
        return ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = expr.length; _i < _len; _i++) {
            e = expr[_i];
            _results.push(e());
          }
          return _results;
        })()).join(" & ");
      }
      expr = expr();
      if (expr !== "") {
        return "& " + expr;
      }
      return "";
    });
  };

  Eq = function(expr) {
    return Op(function() {
      return "= " + expr();
    });
  };

  In = function(expr) {
    return Op(function() {
      return "in " + expr();
    });
  };

  Neq = function(expr) {
    return Op(function() {
      return "!= " + expr();
    });
  };

  Geq = function(expr) {
    return Op(function() {
      return ">= " + expr();
    });
  };

  Leq = function(expr) {
    return Op(function() {
      return "<= " + expr();
    });
  };

  Ge = function(expr) {
    return Op(function() {
      return "> " + expr();
    });
  };

  Le = function(expr) {
    return Op(function() {
      return "< " + expr();
    });
  };

  C = function(constant) {
    return Op(function() {
      return constant;
    });
  };

  V = function(term) {
    return Op(function() {
      return term;
    });
  };

  N = function(term) {
    return Op(function() {
      return "next(" + term + ")";
    });
  };

  Set = function() {
    var list;
    list = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return Op(function() {
      var expr;
      if (list[0] instanceof Array && !(list[1] != null)) {
        list = list[0];
      }
      return "{" + (List((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = list.length; _i < _len; _i++) {
          expr = list[_i];
          _results.push(expr instanceof Function ? expr() : expr);
        }
        return _results;
      })())) + "}";
    });
  };

  P = function(expr) {
    return Op(function() {
      return "(" + expr() + ")";
    });
  };

  True = C('1');

  False = C('0');

  List = function(list) {
    return list.join(', ');
  };

  OutputSMV = function() {
    var retval;
    retval = _c;
    _c = null;
    return retval;
  };

  Loc = function(inst, chart, c) {
    if (typeof inst !== 'string') {
      inst = inst.name;
    }
    return "Loc_" + inst + "_" + chart.number + "_" + c;
  };

  Active = function(chart, c) {
    return "active_" + chart.number + "_" + c;
  };

  Msg = function(m) {
    return "" + m.name + "_" + m.source + "_" + m.target;
  };

  Started = function(chart, c) {
    return "started_" + chart.number + "_" + c;
  };

  gbi = function(chart, c) {
    var n;
    if (typeof chart === 'number') {
      n = chart;
    } else {
      n = chart.number;
    }
    return "gbi_" + n + "_" + c;
  };

  this.LSC.toSMV = function(charts, quite) {
    var c, chart, env, i, inst, l, m, msg, obj, sys, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _m, _n, _o, _p, _ref1, _ref10, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _results;
    if (quite == null) {
      quite = true;
    }
    Quite = quite;
    env = {
      instances: [],
      instanceNames: [],
      messages: [],
      messageNames: []
    };
    sys = {
      instances: [],
      instanceNames: [],
      messages: [],
      messageNames: []
    };
    for (i = _i = 0, _len = charts.length; _i < _len; i = ++_i) {
      chart = charts[i];
      chart.lineloc += 1;
      chart.resloc += 1;
      _ref1 = chart.messages;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        m = _ref1[_j];
        m.location += 1;
      }
    }
    for (i = _k = 0, _len2 = charts.length; _k < _len2; i = ++_k) {
      chart = charts[i];
      chart.number = i;
      chart.messages.sort(function(m1, m2) {
        return m1.location > m2.location;
      });
      _ref2 = chart.instances;
      for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
        inst = _ref2[_l];
        obj = inst.env ? env : sys;
        if (_ref3 = inst.name, __indexOf.call(obj.instanceNames, _ref3) < 0) {
          obj.instanceNames.push(inst.name);
        }
        obj.instances.push(inst);
        inst.chart = chart;
        inst.locations = [0, 1];
        _ref4 = chart.messages;
        for (_m = 0, _len4 = _ref4.length; _m < _len4; _m++) {
          m = _ref4[_m];
          if ((_ref5 = inst.name) === m.source || _ref5 === m.target) {
            inst.locations.push(m.location);
          }
        }
        inst.maxPreLoc = Math.max.apply(Math, (function() {
          var _len5, _n, _ref6, _results;
          _ref6 = inst.locations;
          _results = [];
          for (_n = 0, _len5 = _ref6.length; _n < _len5; _n++) {
            l = _ref6[_n];
            if (l < chart.lineloc) {
              _results.push(l);
            }
          }
          return _results;
        })());
        inst.maxLoc = Math.max.apply(Math, (function() {
          var _len5, _n, _ref6, _results;
          _ref6 = inst.locations;
          _results = [];
          for (_n = 0, _len5 = _ref6.length; _n < _len5; _n++) {
            l = _ref6[_n];
            if (l < chart.resloc) {
              _results.push(l);
            }
          }
          return _results;
        })());
        inst.locations = (function() {
          var _len5, _n, _ref6, _results;
          _ref6 = inst.locations;
          _results = [];
          for (_n = 0, _len5 = _ref6.length; _n < _len5; _n++) {
            l = _ref6[_n];
            if (l < chart.resloc) {
              _results.push(l);
            }
          }
          return _results;
        })();
      }
      chart.messageNames = [];
      _ref6 = chart.messages;
      for (_n = 0, _len5 = _ref6.length; _n < _len5; _n++) {
        m = _ref6[_n];
        if (Msg(__indexOf.call(chart.messageNames, m) < 0)) {
          chart.messageNames.push(Msg(m));
        }
        obj = (_ref7 = m.source, __indexOf.call(env.instanceNames, _ref7) >= 0) ? env : sys;
        if (_ref8 = Msg(m), __indexOf.call(obj.messageNames, _ref8) < 0) {
          obj.messageNames.push(Msg(m));
          obj.messages.push(m);
        }
        m.index = obj.messageNames.indexOf(Msg(m)) + 1;
        if (obj === env) {
          m.fires = V('env_msg')(Eq(C(m.index)));
        } else {
          m.fires = V('sys_msg')(Eq(C(m.index)));
        }
        m.charts = (function() {
          var _len6, _o, _ref9, _results;
          _results = [];
          for (_o = 0, _len6 = charts.length; _o < _len6; _o++) {
            c = charts[_o];
            if (_ref9 = Msg(m), __indexOf.call((function() {
              var _len7, _p, _ref10, _results1;
              _ref10 = c.messages;
              _results1 = [];
              for (_p = 0, _len7 = _ref10.length; _p < _len7; _p++) {
                msg = _ref10[_p];
                _results1.push(Msg(msg));
              }
              return _results1;
            })(), _ref9) >= 0) {
              _results.push(c);
            }
          }
          return _results;
        })();
        m.prevSrcLocs = m.prevDstLocs = 0;
        _ref9 = chart.instances;
        for (_o = 0, _len6 = _ref9.length; _o < _len6; _o++) {
          inst = _ref9[_o];
          if (inst.name === m.source) {
            m.prevSrcLocs = Math.max.apply(Math, [m.prevSrcLocs].concat(__slice.call((function() {
              var _len7, _p, _ref10, _results;
              _ref10 = inst.locations;
              _results = [];
              for (_p = 0, _len7 = _ref10.length; _p < _len7; _p++) {
                l = _ref10[_p];
                if (l < m.location) {
                  _results.push(l);
                }
              }
              return _results;
            })())));
          }
          if (inst.name === m.target) {
            m.prevDstLocs = Math.max.apply(Math, [m.prevDstLocs].concat(__slice.call((function() {
              var _len7, _p, _ref10, _results;
              _ref10 = inst.locations;
              _results = [];
              for (_p = 0, _len7 = _ref10.length; _p < _len7; _p++) {
                l = _ref10[_p];
                if (l < m.location) {
                  _results.push(l);
                }
              }
              return _results;
            })())));
          }
        }
        if (m.prevSrcLocs === 1) {
          m.prevSrcLocs = [0, 1];
        }
        if (m.prevDstLocs === 1) {
          m.prevDstLocs = [0, 1];
        }
        if (m.location > chart.resloc) {
          m.prevSrcLocs = m.prevDstLocs = [];
        }
      }
      chart.copies = (function() {
        _results = [];
        for (var _p = 1, _ref10 = chart.messages.length; 1 <= _ref10 ? _p <= _ref10 : _p >= _ref10; 1 <= _ref10 ? _p++ : _p--){ _results.push(_p); }
        return _results;
      }).apply(this);
    }
    if (!StartSMV()) {
      return null;
    }
    Module("main", []);
    Var(function() {
      Declare('env', "environment(sys.sys_msg, sys.current_player)");
      return Declare('sys', "system()");
    });
    Module("environment", ["sys_msg", "current_player"]);
    Var(function() {
      var chartcopies, _len7, _len8, _len9, _q, _r, _ref11, _results1, _s;
      Declare("env_msg", "0.." + env.messageNames.length);
      chartcopies = [];
      for (_q = 0, _len7 = charts.length; _q < _len7; _q++) {
        chart = charts[_q];
        _ref11 = chart.copies;
        for (_r = 0, _len8 = _ref11.length; _r < _len8; _r++) {
          c = _ref11[_r];
          chartcopies.push(gbi(chart, c));
        }
      }
      Declare("gbuchi", [0].concat(__slice.call(chartcopies), [gbi(charts.length, 1)]));
      _results1 = [];
      for (_s = 0, _len9 = charts.length; _s < _len9; _s++) {
        chart = charts[_s];
        _results1.push((function() {
          var _len10, _ref12, _results2, _t;
          _ref12 = chart.copies;
          _results2 = [];
          for (_t = 0, _len10 = _ref12.length; _t < _len10; _t++) {
            c = _ref12[_t];
            _results2.push((function() {
              var _len11, _ref13, _results3, _u;
              _ref13 = chart.instances;
              _results3 = [];
              for (_u = 0, _len11 = _ref13.length; _u < _len11; _u++) {
                inst = _ref13[_u];
                _results3.push(Declare(Loc(inst, chart, c), __slice.call(inst.locations).concat([inst.maxLoc + 1])));
              }
              return _results3;
            })());
          }
          return _results2;
        })());
      }
      return _results1;
    });
    Define(function() {
      var active_cond, started_cond, _len7, _len8, _len9, _q, _r, _ref11, _results1, _s;
      active_cond = function(chart, i) {
        return And((function() {
          var _len7, _q, _ref11, _results1;
          _ref11 = chart.instances;
          _results1 = [];
          for (_q = 0, _len7 = _ref11.length; _q < _len7; _q++) {
            inst = _ref11[_q];
            _results1.push(V(Loc(inst, chart, i))(Geq(C(inst.maxPreLoc))));
          }
          return _results1;
        })());
      };
      for (_q = 0, _len7 = charts.length; _q < _len7; _q++) {
        chart = charts[_q];
        _ref11 = chart.copies;
        for (_r = 0, _len8 = _ref11.length; _r < _len8; _r++) {
          i = _ref11[_r];
          Definition(Active(chart, i), active_cond(chart, i));
        }
      }
      started_cond = function(chart, i) {
        return Or((function() {
          var _len9, _ref12, _results1, _s;
          _ref12 = chart.instances;
          _results1 = [];
          for (_s = 0, _len9 = _ref12.length; _s < _len9; _s++) {
            inst = _ref12[_s];
            _results1.push(V(Loc(inst, chart, i))(Geq(C(1))));
          }
          return _results1;
        })());
      };
      _results1 = [];
      for (_s = 0, _len9 = charts.length; _s < _len9; _s++) {
        chart = charts[_s];
        _results1.push((function() {
          var _len10, _ref12, _results2, _t;
          _ref12 = chart.copies;
          _results2 = [];
          for (_t = 0, _len10 = _ref12.length; _t < _len10; _t++) {
            i = _ref12[_t];
            _results2.push(Definition(Started(chart, i), started_cond(chart, i)));
          }
          return _results2;
        })());
      }
      return _results1;
    });
    Assign(function() {
      var _len10, _len7, _len8, _len9, _q, _r, _ref11, _ref12, _results1, _s, _t;
      Init("env_msg", C(0));
      Init("gbuchi", C(0));
      for (_q = 0, _len7 = charts.length; _q < _len7; _q++) {
        chart = charts[_q];
        _ref11 = chart.instances;
        for (_r = 0, _len8 = _ref11.length; _r < _len8; _r++) {
          inst = _ref11[_r];
          _ref12 = chart.copies;
          for (_s = 0, _len9 = _ref12.length; _s < _len9; _s++) {
            i = _ref12[_s];
            Init(Loc(inst, chart, i), C(1));
          }
        }
      }
      Comment("Winning condition, encoded as generalized buchi automata");
      Next("gbuchi", Switch(function() {
        var _len10, _len11, _ref13, _t, _u;
        Case(V('gbuchi')(Eq(C(0))), C(gbi(0, 1)));
        for (_t = 0, _len10 = charts.length; _t < _len10; _t++) {
          chart = charts[_t];
          _ref13 = chart.copies;
          for (_u = 0, _len11 = _ref13.length; _u < _len11; _u++) {
            c = _ref13[_u];
            if (c === chart.messages.length) {
              Case(V('gbuchi')(Eq(C(gbi(chart, c))(And(V(Active(chart, c))(Eq(False)))))), C(gbi(chart.number + 1, 1)));
            } else {
              Case(V('gbuchi')(Eq(C(gbi(chart, c))(And(V(Active(chart, c))(Eq(False)))))), C(gbi(chart, c + 1)));
            }
          }
        }
        Case(V('gbuchi')(Eq(C(gbi(charts.length, 1))(And(V('current_player')(Eq(C("ENV"))))))), C(0));
        return Case(True, V('gbuchi'));
      }));
      Comment("A Message can be fired if current_player is ENV");
      Next("env_msg", Switch(function() {
        Case(V('current_player')(Eq(C('ENV'))), C("0.." + env.messageNames.length));
        return Case(True, C(0));
      }));
      _results1 = [];
      for (_t = 0, _len10 = charts.length; _t < _len10; _t++) {
        chart = charts[_t];
        _results1.push((function() {
          var _len11, _ref13, _results2, _u;
          _ref13 = chart.copies;
          _results2 = [];
          for (_u = 0, _len11 = _ref13.length; _u < _len11; _u++) {
            c = _ref13[_u];
            _results2.push((function() {
              var _len12, _ref14, _results3, _v;
              _ref14 = chart.instances;
              _results3 = [];
              for (_v = 0, _len12 = _ref14.length; _v < _len12; _v++) {
                inst = _ref14[_v];
                _results3.push(Next(Loc(inst, chart, c), Switch(function() {
                  var at_end, ci, does_reset, in_mainchart, last_msg, may_move, move_msg, msgs, relevant_msgs, _len13, _len14, _len15, _len16, _w, _x, _y, _z;
                  if (chart.disabled) {
                    Comment("Go to dead state, since mainchart is false");
                    Case(V(Active(chart, c))(Eq(True)), C(inst.maxLoc + 1));
                  }
                  Comment("Reset if any other locations in this chart decides to reset");
                  does_reset = function(i) {
                    return V(Loc(i, chart, c))(Neq(C(0)(And(N(Loc(i, chart, c))(Eq(C(0)))))));
                  };
                  Case(Or((function() {
                    var _len13, _ref15, _results4, _w;
                    _ref15 = chart.instances;
                    _results4 = [];
                    for (_w = 0, _len13 = _ref15.length; _w < _len13; _w++) {
                      i = _ref15[_w];
                      if (i !== inst) {
                        _results4.push(does_reset(i));
                      }
                    }
                    return _results4;
                  })()), C(1));
                  relevant_msgs = (function() {
                    var _len13, _ref15, _ref16, _results4, _w;
                    _ref15 = chart.messages;
                    _results4 = [];
                    for (_w = 0, _len13 = _ref15.length; _w < _len13; _w++) {
                      m = _ref15[_w];
                      if ((_ref16 = inst.name) === m.source || _ref16 === m.target) {
                        _results4.push(m);
                      }
                    }
                    return _results4;
                  })();
                  msgs = (function() {
                    var _len13, _results4, _w;
                    _results4 = [];
                    for (_w = 0, _len13 = relevant_msgs.length; _w < _len13; _w++) {
                      m = relevant_msgs[_w];
                      if (m.location < chart.resloc) {
                        _results4.push(m);
                      }
                    }
                    return _results4;
                  })();
                  last_msg = null;
                  for (_w = 0, _len13 = msgs.length; _w < _len13; _w++) {
                    m = msgs[_w];
                    if (last_msg === null || last_msg.location < m.location) {
                      last_msg = m;
                    }
                  }
                  in_mainchart = function(m) {
                    if (m.location > chart.lineloc) {
                      return True;
                    } else {
                      return False;
                    }
                  };
                  if (c !== 1) {
                    may_move = V(Started(chart, c))(Eq(True(Or(And((function() {
                      var _len14, _ref15, _results4, _x;
                      _ref15 = chart.copies;
                      _results4 = [];
                      for (_x = 0, _len14 = _ref15.length; _x < _len14; _x++) {
                        ci = _ref15[_x];
                        if (ci < c) {
                          _results4.push(V(Started(chart, ci))(Eq(True)));
                        }
                      }
                      return _results4;
                    })())))));
                  } else {
                    may_move = True;
                  }
                  move_msg = function(m) {
                    return V(Loc(m.source, chart, c))(In(Set(m.prevSrcLocs)(And(V(Loc(m.target, chart, c))(In(Set(m.prevDstLocs)(And(m.fires(And(may_move))))))))));
                  };
                  Comment("Reset on last message if others are at end or resetting too");
                  at_end = And((function() {
                    var _len14, _ref15, _ref16, _results4, _x;
                    _ref15 = chart.instances;
                    _results4 = [];
                    for (_x = 0, _len14 = _ref15.length; _x < _len14; _x++) {
                      i = _ref15[_x];
                      if ((_ref16 = i.name) !== last_msg.source && _ref16 !== last_msg.target) {
                        _results4.push(V(Loc(i, chart, c))(Eq(C(i.maxLoc))));
                      }
                    }
                    return _results4;
                  })());
                  if (last_msg !== null) {
                    Case(move_msg(last_msg)(And(at_end)), C(0));
                  }
                  Comment("Move forward on each message on this instance line");
                  for (_x = 0, _len14 = msgs.length; _x < _len14; _x++) {
                    m = msgs[_x];
                    Case(move_msg(m)(And(V(Active(chart, c))(Eq(in_mainchart(m))))), C(m.location));
                  }
                  Comment("If message is relevant and chart inactive reset pre-chart");
                  for (_y = 0, _len15 = relevant_msgs.length; _y < _len15; _y++) {
                    m = relevant_msgs[_y];
                    Case(V(Active(chart, c))(Eq(False(And(m.fires)))), C(0));
                  }
                  Comment("If message is relevant and chart active go to dead location");
                  for (_z = 0, _len16 = relevant_msgs.length; _z < _len16; _z++) {
                    m = relevant_msgs[_z];
                    Case(V(Active(chart, c))(Eq(True(And(m.fires)))), C(inst.maxLoc + 1));
                  }
                  Comment("Clean-up the reset operation");
                  Case(V(Loc(inst, chart, c))(Eq(C(0))), C(1));
                  return Case(True, V(Loc(inst, chart, c)));
                })));
              }
              return _results3;
            })());
          }
          return _results2;
        })());
      }
      return _results1;
    });
    Module("system", []);
    Var(function() {
      Declare("sys_msg", "0.." + sys.messageNames.length);
      return Declare("current_player", ["ENV", "SYS"]);
    });
    Assign(function() {
      Init("sys_msg", C(0));
      Init("current_player", Set("ENV", "SYS"));
      Next("current_player", Set("ENV", "SYS"));
      Comment("A Message can be fired if current_player is SYS");
      return Next("sys_msg", Switch(function() {
        Case(V('current_player')(Eq(C('SYS'))), C("0.." + sys.messageNames.length));
        return Case(True, C(0));
      }));
    });
    return OutputSMV();
  };

}).call(this);
