// Generated by CoffeeScript 1.3.3
(function() {
  var addChart, chartChanged, check, download, dragEffect, dragEffectAdd, dragEffectLeave, dragEffectLeaving, dragEffectRemove, dragFileOver, dragIcon, dragLeftTimeout, dropFile, getSMV, hasFile, instant, switchChart, _ref,
    _this = this,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  this.cfg = {
    margin: 10,
    instance: {
      head: {
        width: 150,
        height: 40
      },
      padding: 25,
      foot: {
        height: 3,
        width: 100
      }
    },
    location: {
      height: 40
    },
    arrow: {
      width: 10,
      height: 3
    },
    chart: {
      minwidth: 400
    },
    sidebar: {
      width: 250
    },
    animation: {
      speed: 300
    },
    prechart: {
      padding: 50
    },
    toolbar: {
      height: 40
    },
    icon: {
      height: 24
    },
    opacity: {
      selected: 0.6,
      hover: 0.2
    },
    drag: {
      effect: {
        opacity: 0.8
      }
    }
  };

  this.cfg.instance.width = this.cfg.instance.head.width + this.cfg.instance.padding * 2;

  if ((_ref = this.LSC) == null) {
    this.LSC = {};
  }

  this.CurrentChart = null;

  this.CurrentIndex = 0;

  this.Charts = [];

  this.LSC.pageX2RaphaelX = function(x) {
    return x + $("#workspace").scrollLeft() - $("#workspace").offset().left;
  };

  this.LSC.pageY2RaphaelY = function(y) {
    return y + $("#workspace").scrollTop() - $("#workspace").offset().top;
  };

  this.log = function(msg) {
    if ((typeof console !== "undefined" && console !== null ? console.log : void 0) != null) {
      return console.log(msg);
    } else {
      alert("Provide console.log for log messages");
      return _this.log = function(msg) {};
    }
  };

  this.inspect = function(object) {
    var key, value;
    return "{" + ((function() {
      var _results;
      _results = [];
      for (key in object) {
        value = object[key];
        _results.push("" + key + ": \"" + value + "\"");
      }
      return _results;
    })()).join(", ") + "}";
  };

  instant = false;

  this.LSC.instant = function() {
    return instant = true;
  };

  this.LSC.animate = function() {
    return instant = false;
  };

  this.LSC.initialize = function() {
    $(window).resize(function() {
      $("#workspace").height($(window).height() - cfg.toolbar.height);
      return $("#chartlist").height($(window).height() - cfg.toolbar.height);
    });
    $(window).resize();
    _this.paper = _this.Raphael("workspace", cfg.chart.minwidth, "400");
    _this.Raphael.el.update = function(params) {
      if (instant) {
        return this.attr(params);
      } else {
        return this.animate(params, cfg.animation.speed);
      }
    };
    _this.Raphael.el.moveTo = function(x, y) {
      if (this.type === "path") {
        this.translate(x - this.getBBox().x, y - this.getBBox().y);
        this.translate(x - this.getBBox().x, y - this.getBBox().y);
        this.translate(x - this.getBBox().x, y - this.getBBox().y);
        this.translate(x - this.getBBox().x, y - this.getBBox().y);
        return this.translate(x - this.getBBox().x, y - this.getBBox().y);
      } else {
        return this.attr({
          x: x,
          y: y
        });
      }
    };
    document.onselectstart = function() {
      return false;
    };
    jQuery.event.props.push('dataTransfer');
    $("body").on("dragenter", dragEffectAdd);
    $("body").on("dragleave", dragEffectLeave);
    $("body").on("dragover", dragFileOver);
    $("body").on("drop", dropFile);
    $("#workspace")[0].addEventListener("mousedown", (function(e) {
      return typeof CurrentChart !== "undefined" && CurrentChart !== null ? CurrentChart.mouseDown(e) : void 0;
    }), true);
    $("#workspace")[0].addEventListener("mousemove", (function(e) {
      return typeof CurrentChart !== "undefined" && CurrentChart !== null ? CurrentChart.mouseMove(e) : void 0;
    }), true);
    $("#workspace")[0].addEventListener("mouseup", (function(e) {
      return typeof CurrentChart !== "undefined" && CurrentChart !== null ? CurrentChart.mouseUp(e) : void 0;
    }), true);
    $("#workspace")[0].addEventListener("mousedown", (function(e) {
      return typeof CurrentChart !== "undefined" && CurrentChart !== null ? CurrentChart.clearSelection(e) : void 0;
    }), false);
    _this.sidebar = new _this.LSC.Sidebar($("#chartlist"));
    _this.toolbar = new _this.LSC.Toolbar(_this.Raphael("toolbar", "100%", cfg.toolbar.height));
    new _this.LSC.Button("piechart", "Add chart", toolbar).click(function() {
      return addChart();
    });
    new _this.LSC.Button("plus", "Add controller instance", toolbar).click(function() {
      return typeof CurrentChart !== "undefined" && CurrentChart !== null ? CurrentChart.createInstance(false) : void 0;
    });
    new _this.LSC.Button("globe", "Add environment instance", toolbar).click(function() {
      return typeof CurrentChart !== "undefined" && CurrentChart !== null ? CurrentChart.createInstance(true) : void 0;
    });
    new _this.LSC.Button("exchange", "Add message", toolbar).click(function() {
      return typeof CurrentChart !== "undefined" && CurrentChart !== null ? CurrentChart.addMessage() : void 0;
    });
    new _this.LSC.Button("trash", "Delete selection", toolbar).click(function() {
      return typeof CurrentChart !== "undefined" && CurrentChart !== null ? CurrentChart.deleteSelection() : void 0;
    });
    new _this.LSC.Button("cloudDown", "Download project", toolbar).click(download);
    new _this.LSC.Button("download", "Export SMV code", toolbar).click(getSMV);
    new _this.LSC.Button("arrowright", "Check realizability", toolbar).click(check);
    addChart();
    return _this.LSC.Applet.initialize();
  };

  $(LSC.initialize);

  addChart = function(json, switchto) {
    var index;
    if (json == null) {
      json = _this.LSC.Chart.emptyJSON;
    }
    if (switchto == null) {
      switchto = true;
    }
    _this.Charts.push(json);
    index = _this.Charts.length - 1;
    _this.sidebar.addEntry(index, json.name, switchChart);
    if (switchto) {
      return switchChart(index);
    }
  };

  switchChart = function(index) {
    if (_this.Charts[index] != null) {
      if (_this.CurrentChart != null) {
        _this.Charts[_this.CurrentIndex] = _this.CurrentChart.toJSON();
      }
      _this.paper.clear();
      _this.CurrentChart = new _this.LSC.Chart(_this.paper);
      _this.CurrentChart.fromJSON(_this.Charts[index]);
      _this.CurrentIndex = index;
      return _this.CurrentChart.change(chartChanged);
    }
  };

  chartChanged = function() {
    if (_this.CurrentChart != null) {
      return _this.sidebar.updateEntry(_this.CurrentIndex, _this.CurrentChart.name);
    }
  };

  download = function() {
    var data, dataurl;
    if (_this.CurrentChart != null) {
      _this.Charts[_this.CurrentIndex] = _this.CurrentChart.toJSON();
    }
    data = $.toJSON({
      title: LSC.escapeName(_this.toolbar.getTitle()),
      charts: _this.Charts
    });
    dataurl = "data:application/lsc+json;base64," + ($.base64Encode(data));
    return window.open(dataurl, "_blank");
  };

  hasFile = function(event) {
    var _ref1, _ref2;
    return ((event != null ? (_ref1 = event.dataTransfer) != null ? _ref1.types : void 0 : void 0) != null) && __indexOf.call(event != null ? (_ref2 = event.dataTransfer) != null ? _ref2.types : void 0 : void 0, "Files") >= 0;
  };

  dragEffect = dragIcon = dragLeftTimeout = null;

  dragEffectLeaving = false;

  dragEffectAdd = function(event) {
    var path;
    if ((event != null) && !hasFile(event)) {
      return;
    }
    if (dragLeftTimeout != null) {
      clearTimeout(dragLeftTimeout);
      dragLeftTimeout = null;
    }
    if (dragEffect == null) {
      $("#effectarea").css("display", "block");
      dragEffect = Raphael("effectarea", "100%", "100%");
      path = Raphael.transformPath(Icons["cloudUp"], "s30");
      path = Raphael.transformPath(path, "t" + ($(window).width() / 2) + "," + ($(window).height() / 2));
      dragIcon = dragEffect.path(path);
      dragIcon.attr({
        opacity: 0,
        fill: "#ccc",
        stroke: "none"
      });
      dragEffectLeaving = true;
    }
    if (dragEffectLeaving) {
      dragIcon.update({
        opacity: cfg.drag.effect.opacity
      });
      return dragEffectLeaving = false;
    }
  };

  dragEffectLeave = function(event) {
    if (dragLeftTimeout == null) {
      return dragLeftTimeout = setTimeout(dragEffectRemove, 100);
    }
  };

  dragEffectRemove = function() {
    dragEffectLeaving = true;
    return dragIcon != null ? dragIcon.animate({
      opacity: 0
    }, cfg.animation.speed, function() {
      if (dragLeftTimeout != null) {
        $("#effectarea").css("display", "none");
        dragIcon.remove();
        dragEffect.remove();
        dragEffect = dragIcon = dragLeftTimeout = null;
        return dragEffectLeaving = false;
      }
    }) : void 0;
  };

  dragFileOver = function(event) {
    if (!hasFile(event)) {
      return;
    }
    dragEffectAdd();
    event.stopPropagation();
    event.preventDefault();
    return event.dataTransfer.dropEffect = 'copy';
  };

  dropFile = function(event) {
    var file, reader;
    if (!hasFile(event)) {
      return;
    }
    dragEffectLeave();
    event.stopPropagation();
    event.preventDefault();
    file = event.dataTransfer.files[0];
    _this.CurrentChart = null;
    _this.CurrentIndex = 0;
    _this.Charts = [];
    _this.paper.clear();
    _this.sidebar.clear();
    reader = new FileReader();
    reader.onload = function() {
      var data, item, _i, _len, _ref1;
      data = $.secureEvalJSON(reader.result);
      log(data);
      _ref1 = data.charts;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        item = _ref1[_i];
        addChart(item, false);
      }
      _this.toolbar.setTitle(LSC.unescapeName(data.title));
      if (_this.Charts.length === 0) {
        return addChart();
      } else {
        return switchChart(0);
      }
    };
    log(file);
    return reader.readAsText(file);
  };

  this.LSC.escapeName = function(name) {
    return name;
  };

  this.LSC.unescapeName = function(name) {
    return name;
  };

  getSMV = function() {
    var data, dataurl;
    if (_this.CurrentChart != null) {
      _this.Charts[_this.CurrentIndex] = _this.CurrentChart.toJSON();
    }
    data = _this.LSC.toSMV($.secureEvalJSON($.toJSON(_this.Charts)));
    dataurl = "data:application/lsc+json;base64," + ($.base64Encode(data));
    return window.open(dataurl, "_blank");
  };

  check = function() {
    var retval, smv;
    if (_this.CurrentChart != null) {
      _this.Charts[_this.CurrentIndex] = _this.CurrentChart.toJSON();
    }
    smv = LSC.toSMV($.secureEvalJSON($.toJSON(_this.Charts)));
    retval = LSC.Applet.checkRealizability(smv);
    return alert(retval);
  };

}).call(this);
