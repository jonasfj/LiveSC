// Generated by CoffeeScript 1.3.3
(function() {
  var addChart, chartChanged, check, download, dragEffect, dragEffectAdd, dragEffectLeave, dragEffectLeaving, dragEffectRemove, dragFileOver, dragIcon, dragLeftTimeout, dropFile, examples, exportSVG, getSMV, hasFile, informDownload, instant, removeChart, switchChart, synthesize, _ref,
    _this = this,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  this.cfg = {
    margin: 10,
    instance: {
      head: {
        width: 150,
        height: 40
      },
      padding: 25,
      foot: {
        height: 3,
        width: 100
      }
    },
    location: {
      height: 40
    },
    arrow: {
      width: 10,
      height: 3
    },
    chart: {
      minwidth: 400
    },
    sidebar: {
      width: 250
    },
    animation: {
      speed: 300
    },
    prechart: {
      padding: 50
    },
    toolbar: {
      height: 40
    },
    icon: {
      height: 24
    },
    opacity: {
      selected: 0.6,
      hover: 0.2
    },
    drag: {
      effect: {
        opacity: 0.8
      }
    },
    regex: {
      namepattern: /[A-z]+\w*/g
    },
    app: {
      name: "LiveSC"
    }
  };

  this.cfg.instance.width = this.cfg.instance.head.width + this.cfg.instance.padding * 2;

  if ((_ref = this.LSC) == null) {
    this.LSC = {};
  }

  this.setDocTitle = function(title) {
    return document.title = ("" + cfg.app.name + " - ") + title;
  };

  this.CurrentChart = null;

  this.CurrentIndex = 0;

  this.Charts = [];

  this.LSC.pageX2RaphaelX = function(x) {
    return x + $("#workspace").scrollLeft() - $("#workspace").offset().left;
  };

  this.LSC.pageY2RaphaelY = function(y) {
    return y + $("#workspace").scrollTop() - $("#workspace").offset().top;
  };

  this.log = function(msg) {
    if ((typeof console !== "undefined" && console !== null ? console.log : void 0) != null) {
      return console.log(msg);
    } else {
      alert("Provide console.log for log messages");
      return _this.log = function(msg) {};
    }
  };

  this.inspect = function(object) {
    var key, value;
    return "{" + ((function() {
      var _results;
      _results = [];
      for (key in object) {
        value = object[key];
        _results.push("" + key + ": \"" + value + "\"");
      }
      return _results;
    })()).join(", ") + "}";
  };

  instant = false;

  this.LSC.instant = function() {
    return instant = true;
  };

  this.LSC.animate = function() {
    return instant = false;
  };

  this.LSC.initialize = function() {
    $(window).resize(function() {
      $("#workspace").height($(window).height() - cfg.toolbar.height);
      return $("#chartlist").height($(window).height() - cfg.toolbar.height);
    });
    $(window).resize();
    setDocTitle("Untitled");
    _this.paper = _this.Raphael("workspace", cfg.chart.minwidth, "400");
    _this.Raphael.el.update = function(params) {
      if (instant) {
        return this.attr(params);
      } else {
        return this.animate(params, cfg.animation.speed);
      }
    };
    document.onselectstart = function() {
      return false;
    };
    jQuery.event.props.push('dataTransfer');
    $("body").on("dragenter", dragEffectAdd);
    $("body").on("dragleave", dragEffectLeave);
    $("body").on("dragover", dragFileOver);
    $("body").on("drop", dropFile);
    $("#workspace")[0].addEventListener("mousedown", (function(e) {
      return typeof CurrentChart !== "undefined" && CurrentChart !== null ? CurrentChart.mouseDown(e) : void 0;
    }), true);
    $("#workspace")[0].addEventListener("mousemove", (function(e) {
      return typeof CurrentChart !== "undefined" && CurrentChart !== null ? CurrentChart.mouseMove(e) : void 0;
    }), true);
    $("#workspace")[0].addEventListener("mouseup", (function(e) {
      return typeof CurrentChart !== "undefined" && CurrentChart !== null ? CurrentChart.mouseUp(e) : void 0;
    }), true);
    $("#workspace")[0].addEventListener("mousedown", (function(e) {
      return typeof CurrentChart !== "undefined" && CurrentChart !== null ? CurrentChart.clearSelection(e) : void 0;
    }), false);
    _this.sidebar = new _this.LSC.Sidebar($("#chartlist"));
    _this.LSC.Toolbar.initialize();
    _this.LSC.Button({
      icon: "AddChart",
      tooltip: "Add chart to specification",
      help: "Adds a <b>new chart</b> to the current specification project.\nNotice that all chart in the project\nmust be satisfied by any realization. Typically charts are used to express independent\nsenarios or counter examples.",
      action: function() {
        return addChart();
      }
    });
    _this.LSC.Button({
      icon: "plus",
      tooltip: "Add system instance",
      help: "Adds a system <b>instance to the current chart</b>. You can change the instance type from\nsystem to environment type later. Remember that instance names are unique within\na given chart. Instance type must also match type of the same instance in other\ncharts.",
      action: function() {
        return typeof CurrentChart !== "undefined" && CurrentChart !== null ? CurrentChart.createInstance(false) : void 0;
      }
    });
    _this.LSC.Button({
      icon: "SwitchType",
      tooltip: "Toggle instance type (sys/env)",
      help: "Toggle instance type, ie. convert <b>system instance to environment instances</b>\nand vice versus.\nNotice that the type of instances with same name in other charts will also change.",
      action: function() {
        return typeof CurrentChart !== "undefined" && CurrentChart !== null ? CurrentChart.changeInstanceType() : void 0;
      }
    });
    _this.LSC.Button({
      icon: "exchange",
      tooltip: "Add message",
      help: "Add a <b>message exchange</b> to the current chart. Two messages are equal to if they have the\nsame name and go from the same sender to the same receiver.\nMessages in the forbidden section, will abort the prefix and are not allowed to occur\nin an execution of the main chart.",
      action: function() {
        return typeof CurrentChart !== "undefined" && CurrentChart !== null ? CurrentChart.addMessage() : void 0;
      }
    });
    _this.LSC.Button({
      icon: "cross",
      tooltip: "Toggle FALSE main chart",
      help: "Toggle <b>false main chart</b>, meaning that we consider the main chart impossible to satisfy.\nThis is equivalent to requiring that the prechart is never completed.\nNote, any messages in the main chart will be ignored and are of no importance here.",
      action: function() {
        return typeof CurrentChart !== "undefined" && CurrentChart !== null ? CurrentChart.toggleEnabledness() : void 0;
      }
    });
    _this.LSC.Button({
      icon: "trash",
      tooltip: "Delete selection",
      help: "<b>Deletes</b> the current select, be it a message or and instance.\nNote that if you delete and instance the associated messages will also be removed.",
      action: function() {
        return typeof CurrentChart !== "undefined" && CurrentChart !== null ? CurrentChart.deleteSelection() : void 0;
      }
    });
    _this.LSC.Separator();
    _this.LSC.Button({
      icon: "cloudDown",
      tooltip: "Download project as JSON file",
      help: "Export <b>project as JSON</b>. The file can be saved to disk and drag 'n' dropped back\ninto this editor at any time. Thus, enabling you to save your projects.",
      action: download
    });
    _this.LSC.Button({
      icon: "picture",
      tooltip: "Export Chart as SVG",
      help: "Export current <b>chart as SVG</b>. With the ability to open, edit and export these files from\n<a href='http://inkscape.org/'>Inkscape</a> this is quick way to generate high quality\nlive sequence charts with annotations.",
      action: exportSVG
    });
    _this.LSC.Button({
      icon: "download",
      tooltip: "Export SMV code",
      help: "Export the <b>transistion system</b> of 'repeated reachability' game this project was\ntranslated to. You can use this to check realizability and synthesize a strategy\nusing a commandline version of our engine downloadable from \n<a href='https://github.com/jopsen/LiveSC' target='_blank'>github</a>.",
      action: getSMV
    });
    _this.LSC.Separator();
    _this.LSC.Button({
      icon: "arrowright",
      tooltip: "Check realizability",
      help: "<b>Check realizability</b> of the current specification project.\nThis will lazy load a Java applet and for large projects this will not finish\nany time soon. Consider saving your project before trying this feature.",
      action: check
    });
    _this.LSC.Button({
      icon: "magic",
      tooltip: "Synthesize a strategy",
      help: "Check realizability and <b>synthesize a strategy</b> for the system, if the current\nspecification project is realizable. At the moment we only inform you about\nthe size of the BDD for representation of the transision system.",
      action: synthesize
    });
    _this.LSC.FloatRight();
    _this.LSC.Button({
      icon: "githubalt",
      tooltip: "More information about this project on github",
      help: "This project is hosted at <a href='https://github.com/jopsen/LiveSC' target='_blank'>\ngithub</a>, sources are available under\n<a href='http://www.gnu.org/licenses/gpl.html' target='_blank'>GNU GPL</a>.<br>\nFeel free to <b>fork and play</b> around if you feel like it.",
      action: function() {
        return window.open("https://github.com/jopsen/LiveSC", "_blank");
      }
    });
    _this.LSC.Button({
      icon: "help",
      tooltip: "Display some helpful instructions",
      help: "Display these <b>helpful instructions</b>, they will also be shown whenever\nLiveSC is opened. Just click anywhere to make them go away.\nBut not yet, please finish reading this list first, the best is saved for last.",
      action: function() {
        return $("#helpdialog").fadeIn(cfg.animation.speed);
      }
    });
    _this.LSC.Button({
      icon: "star3",
      tooltip: "Load example from gallery",
      help: "Load example from our very neat <b>example gallery</b>. Each example comes with a\nlittle explanatory text, that gives your a hit about why this might be important.\nNotice that some of the examples are so large that we can't handle at this point.",
      action: examples
    });
    addChart();
    $("#welcomedialog").click(function() {
      return $("#welcomedialog").fadeOut(cfg.animation.speed);
    });
    $("#helpdialog").click(function() {
      return $("#helpdialog").fadeOut(cfg.animation.speed);
    });
    $("#examplehint").click(examples);
    return $("#helphint").click(function() {
      return $("#helpdialog").fadeIn(cfg.animation.speed);
    });
  };

  $(LSC.initialize);

  addChart = function(json, switchto) {
    var index;
    if (json == null) {
      json = _this.LSC.Chart.emptyJSON;
    }
    if (switchto == null) {
      switchto = true;
    }
    _this.Charts.push(json);
    index = _this.Charts.length - 1;
    _this.sidebar.addEntry(index, json.name, switchChart, removeChart);
    if (switchto) {
      return switchChart(index);
    }
  };

  switchChart = function(index) {
    if (_this.Charts[index] != null) {
      if (_this.CurrentChart != null) {
        _this.Charts[_this.CurrentIndex] = _this.CurrentChart.toJSON();
      }
      _this.paper.clear();
      _this.CurrentChart = new _this.LSC.Chart(_this.paper);
      _this.CurrentChart.fromJSON(_this.Charts[index]);
      _this.CurrentIndex = index;
      return _this.CurrentChart.change(chartChanged);
    }
  };

  removeChart = function(index) {
    if (_this.Charts[index] != null) {
      _this.CurrentChart = null;
      _this.Charts.splice(index, 1);
      if (index > 0) {
        return switchChart(index - 1);
      } else if (index === 0) {
        return addChart();
      }
    }
  };

  chartChanged = function() {
    if (_this.CurrentChart != null) {
      return _this.sidebar.updateEntry(_this.CurrentIndex, _this.CurrentChart.name);
    }
  };

  download = function() {
    var data, dataurl;
    if (_this.CurrentChart != null) {
      _this.Charts[_this.CurrentIndex] = _this.CurrentChart.toJSON();
    }
    data = $.toJSON({
      title: LSC.Toolbar.getTitle(),
      charts: _this.Charts
    });
    dataurl = "data:application/octet-stream;base64," + ($.base64Encode(data));
    informDownload();
    return window.open(dataurl, "_blank");
  };

  hasFile = function(event) {
    var _ref1, _ref2;
    return ((event != null ? (_ref1 = event.dataTransfer) != null ? _ref1.types : void 0 : void 0) != null) && __indexOf.call(event != null ? (_ref2 = event.dataTransfer) != null ? _ref2.types : void 0 : void 0, "Files") >= 0;
  };

  dragEffect = dragIcon = dragLeftTimeout = null;

  dragEffectLeaving = false;

  dragEffectAdd = function(event) {
    var path;
    if ((event != null) && !hasFile(event)) {
      return;
    }
    if (dragLeftTimeout != null) {
      clearTimeout(dragLeftTimeout);
      dragLeftTimeout = null;
    }
    if (dragEffect == null) {
      $("#effectarea").css("display", "block");
      dragEffect = Raphael("effectarea", "100%", "100%");
      path = Raphael.transformPath(Icons["cloudUp"], "s30");
      path = Raphael.transformPath(path, "t" + ($(window).width() / 2) + "," + ($(window).height() / 2));
      dragIcon = dragEffect.path(path);
      dragIcon.attr({
        opacity: 0,
        fill: "#ccc",
        stroke: "none"
      });
      dragEffectLeaving = true;
    }
    if (dragEffectLeaving) {
      dragIcon.update({
        opacity: cfg.drag.effect.opacity
      });
      return dragEffectLeaving = false;
    }
  };

  dragEffectLeave = function(event) {
    if (dragLeftTimeout == null) {
      return dragLeftTimeout = setTimeout(dragEffectRemove, 100);
    }
  };

  dragEffectRemove = function() {
    dragEffectLeaving = true;
    return dragIcon != null ? dragIcon.animate({
      opacity: 0
    }, cfg.animation.speed, function() {
      if (dragLeftTimeout != null) {
        $("#effectarea").css("display", "none");
        dragIcon.remove();
        dragEffect.remove();
        dragEffect = dragIcon = dragLeftTimeout = null;
        return dragEffectLeaving = false;
      }
    }) : void 0;
  };

  dragFileOver = function(event) {
    if (!hasFile(event)) {
      return;
    }
    dragEffectAdd();
    event.stopPropagation();
    event.preventDefault();
    return event.dataTransfer.dropEffect = 'copy';
  };

  dropFile = function(event) {
    var file, reader;
    if (!hasFile(event)) {
      return;
    }
    dragEffectLeave();
    event.stopPropagation();
    event.preventDefault();
    file = event.dataTransfer.files[0];
    _this.CurrentChart = null;
    _this.CurrentIndex = 0;
    _this.Charts = [];
    _this.paper.clear();
    _this.sidebar.clear();
    reader = new FileReader();
    reader.onload = function() {
      var data, item, _i, _len, _ref1;
      data = $.secureEvalJSON(reader.result);
      _ref1 = data.charts;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        item = _ref1[_i];
        addChart(item, false);
      }
      LSC.Toolbar.setTitle(data.title);
      setDocTitle(data.title);
      if (_this.Charts.length === 0) {
        return addChart();
      } else {
        return switchChart(0);
      }
    };
    return reader.readAsText(file);
  };

  getSMV = function() {
    var data, dataurl;
    if (_this.CurrentChart != null) {
      _this.Charts[_this.CurrentIndex] = _this.CurrentChart.toJSON();
    }
    try {
      data = _this.LSC.toSMV($.secureEvalJSON($.toJSON(_this.Charts)));
    } catch (error) {
      alert("An error occurred during translation.\nPlease provide at least one message.");
      return;
    }
    dataurl = "data:text/plain;base64," + ($.base64Encode(data));
    informDownload();
    return window.open(dataurl, "_blank");
  };

  check = function() {
    var smv;
    if (_this.CurrentChart != null) {
      _this.Charts[_this.CurrentIndex] = _this.CurrentChart.toJSON();
    }
    try {
      smv = LSC.toSMV($.secureEvalJSON($.toJSON(_this.Charts)));
    } catch (error) {
      alert("An error occurred during translation.\nPlease provide at least one message.");
      return;
    }
    return LSC.Applet.check(smv);
  };

  synthesize = function() {
    var smv;
    if (_this.CurrentChart != null) {
      _this.Charts[_this.CurrentIndex] = _this.CurrentChart.toJSON();
    }
    try {
      smv = LSC.toSMV($.secureEvalJSON($.toJSON(_this.Charts)));
    } catch (error) {
      alert("An error occurred during translation.\nPlease provide at least one message.");
      return;
    }
    return LSC.Applet.synthesize(smv);
  };

  exportSVG = function() {
    var data, dataurl;
    if (_this.CurrentChart != null) {
      _this.CurrentChart.clearSelection();
      data = _this.CurrentChart.paper.toSVG();
      dataurl = "data:image/svg+xml;base64," + ($.base64Encode(data));
      informDownload();
      return window.open(dataurl, "_blank");
    }
  };

  informDownload = function() {
    if (navigator.userAgent.indexOf("Chrome/19") >= 0) {
      return alert("You are running Chrome 19.\nThis browser has problems with data-urls,\nsee issue #97108 (chromium), a fix is due in Chrome 20.");
    }
  };

  examples = function() {
    return LSC.loadExample(function(json) {
      var item, _i, _len, _ref1;
      this.CurrentChart = null;
      this.CurrentIndex = 0;
      this.Charts = [];
      this.paper.clear();
      this.sidebar.clear();
      _ref1 = json.charts;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        item = _ref1[_i];
        addChart(item, false);
      }
      LSC.Toolbar.setTitle(json.title);
      setDocTitle(json.title);
      if (this.Charts.length === 0) {
        return addChart();
      } else {
        return switchChart(0);
      }
    });
  };

}).call(this);
