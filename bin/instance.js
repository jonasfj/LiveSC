// Generated by CoffeeScript 1.3.3
(function() {
  var _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if ((_ref = this.LSC) == null) {
    this.LSC = {};
  }

  this.LSC.Instance = (function() {

    function Instance(name, number, env, paper, lsc) {
      this.name = name;
      this.number = number;
      this.env = env;
      this.paper = paper;
      this.lsc = lsc;
      this.remove = __bind(this.remove, this);

      this.toJSON = __bind(this.toJSON, this);

      this.unselect = __bind(this.unselect, this);

      this.select = __bind(this.select, this);

      this.hoverOut = __bind(this.hoverOut, this);

      this.hoverIn = __bind(this.hoverIn, this);

      this.unedit = __bind(this.unedit, this);

      this.edit = __bind(this.edit, this);

      this.drop = __bind(this.drop, this);

      this.move = __bind(this.move, this);

      this.drag = __bind(this.drag, this);

      this.update = __bind(this.update, this);

      this.selected = false;
      this.head = this.paper.rect(0, 0, 0, 0);
      this.head.attr({
        cursor: "pointer",
        fill: "#999",
        "fill-opacity": 0
      });
      this.head.drag(this.move, this.drag, this.drop);
      this.head.hover(this.hoverIn, this.hoverOut);
      this.text = this.paper.text(0, 0, this.name);
      this.head.dblclick(this.edit);
      this.text.dblclick(this.edit);
      this.head.mousedown(this.select);
      this.text.mousedown(this.select);
      this.line = this.paper.path("");
      this.line.attr({
        "stroke-dasharray": "-"
      });
      this.foot = this.paper.rect(0, 0, 0, 0);
      this.foot.attr({
        "fill": "black"
      });
      this.width = cfg.instance.width;
    }

    Instance.prototype.update = function(y, height) {
      var lh, pad, x;
      this.y = y;
      x = this.lsc.numberX(this.number);
      pad = cfg.instance.padding;
      if (this.env) {
        this.head.attr({
          "stroke-dasharray": "--"
        });
      } else {
        this.head.attr({
          "stroke-dasharray": ""
        });
      }
      this.head.update({
        x: x - cfg.instance.head.width / 2,
        y: y,
        width: cfg.instance.head.width,
        height: cfg.instance.head.height,
        r: 5
      });
      this.text.update({
        text: this.name,
        x: x,
        y: y + cfg.instance.head.height / 2
      });
      lh = height - cfg.instance.foot.height - cfg.instance.head.height;
      this.line.update({
        path: "M " + x + "," + (y + cfg.instance.head.height) + " v " + lh
      });
      return this.foot.update({
        x: x - cfg.instance.foot.width / 2,
        y: y + cfg.instance.head.height + lh,
        width: cfg.instance.foot.width,
        height: cfg.instance.foot.height
      });
    };

    Instance.prototype.drag = function(x, y, event) {};

    Instance.prototype.move = function(dx, dy, x, y, event) {
      var dst;
      dst = this.lsc.xNumber(LSC.pageX2RaphaelX(x));
      if (dst !== this.number) {
        return this.lsc.moveInstance(this, dst);
      }
    };

    Instance.prototype.drop = function(event) {};

    Instance.prototype.edit = function(event) {
      var _this = this;
      if (this.editor == null) {
        this.editor = $("<input type='text'/>");
        this.editor.css({
          left: this.lsc.numberX(this.number) - cfg.instance.head.width / 2 + cfg.margin / 2,
          top: this.y + cfg.margin / 2,
          width: cfg.instance.head.width - cfg.margin,
          height: cfg.instance.head.height - cfg.margin
        });
        this.editor.addClass("editor centered");
        this.editor.appendTo("#workspace");
        this.text.attr({
          text: "",
          opacity: 0
        });
        this.editor.mousedown(function(e) {
          return e.stopPropagation();
        });
        return this.editor.val(this.name).focus().select().blur(this.unedit).keypress(function(event) {
          if (event.keyCode === 13) {
            return _this.unedit();
          }
        });
      }
    };

    Instance.prototype.unedit = function(event) {
      var inst, player, val;
      if (this.editor != null) {
        if (this.editor.val() === "") {
          return;
        }
        if (!cfg.regex.namepattern.test(this.editor.val())) {
          return;
        }
        val = this.editor.val().trim().match(cfg.regex.namepattern).join('');
        inst = this.lsc.getInstanceByName(val);
        if ((inst != null) && inst.number !== this.number) {
          this.editor.val(this.name);
          this.editor.css("background", "yellow").focus();
          return;
        }
        this.name = val;
        this.text.attr({
          text: this.name,
          opacity: 1
        });
        this.editor.remove();
        this.editor = null;
        this.lsc.change();
        player = this.lsc.getInstanceByNameInAllCharts(val);
        if (player != null) {
          this.env = player.env;
          return this.lsc.update();
        }
      }
    };

    Instance.prototype.hoverIn = function() {
      if (!this.selected) {
        return this.head.update({
          "fill-opacity": cfg.opacity.hover
        });
      }
    };

    Instance.prototype.hoverOut = function() {
      if (!this.selected) {
        return this.head.update({
          "fill-opacity": 0
        });
      }
    };

    Instance.prototype.select = function(event) {
      if (event != null) {
        if (typeof event.stopPropagation === "function") {
          event.stopPropagation();
        }
      }
      if (!this.selected) {
        this.lsc.clearSelection();
        this.selected = true;
        return this.head.update({
          "fill-opacity": cfg.opacity.selected
        });
      }
    };

    Instance.prototype.unselect = function() {
      this.selected = false;
      return this.head.update({
        "fill-opacity": 0
      });
    };

    Instance.prototype.toJSON = function() {
      return {
        name: this.name,
        number: this.number,
        env: this.env
      };
    };

    Instance.prototype.remove = function() {
      this.head.remove();
      this.line.remove();
      this.foot.remove();
      return this.text.remove();
    };

    return Instance;

  })();

}).call(this);
