<!DOCTYPE html><html><head><meta charset="UTF-8" /><title>LiveSC - untitled.lsc</title><!--TODO:Needed structure: - class Document for handling collection of charts 	- Serialize/Deserialize - class Editor for handling events and delegating to active chart 	- delegate toolbar actions to charts 	- handle mouseevent for addMessage 	- maintain scene/paper size (in cooperation with chart) - Workspace (overview of charts) - Place LSC/paper in div (overflow: auto) - Add title, existential/univertial, etc. to chartOnce the structure is in order: - Remove add(Instance/Message) methods  - Add createInstance - Update createMessage and "add message" handler to create at click and move at mousemoveWhen we feel like it: - LiveSequenceChart.fromJSON - Invariants - Verification - Code generation? - Serialization to online repository (php)--><link rel="stylesheet" type="text/css" href="style.css"/><script type="text/javascript" src="raphael-min.js"/></script><script type="text/javascript" src="raphael-icons.js"/></script><script type="text/javascript" src="jquery.min.js"/></script><script type="text/javascript" src="jquery.json.min.js"/></script><script type="text/javascript" src="jquery.base64.js"/></script><script type="text/javascript" src="coffee-script.min.js"></script><script type="text/coffeescript" src="editor.coffee"></script><script type="text/coffeescript">$ =>	@paper = @Raphael(0, 0, "100%", "100%")	@LSC.initialize(@paper)	@log = (msg) => $("#log").append(msg + "<br>")	@inspect = (object) =>		str = "{"		for key, value of object			str += "#{key}: \"#{value}\", "		return str + "}"	toolbar = new @LSC.Toolbar(@paper)	lsc = new @LSC.Chart("Untitled.lsc", @paper)	addInstance = =>		i = new @LSC.Instance("new", lsc.instances.length, @paper, lsc)		lsc.addInstance(i)		lsc.update()		i.edit()		download = =>		data = lsc.serialize()		dataurl = "data:application/lsc+json;base64,#{$.base64Encode(data)}"		window.open(dataurl, "_blank")	isAddingMessage = false	addMessage = =>		isAddingMessage = true		@scene.toFront()		@scene.attr			cursor:		"crosshair"	loc1 = null	num1 = null	@scene.click (event) =>		lsc.clearSelection()		if isAddingMessage			num = lsc.xNumber(event.clientX)			loc = lsc.GetLocation(event.clientY)			if num1? and loc1?				if num1 != num					lsc.createMessage(num1, num, Math.round((loc + loc1) / 2), "msg()")				num1 = null				loc1 = null				isAddingMessage = false				@scene.toBack()				@scene.attr					cursor:		"default"			else				num1 = num				loc1 = loc	new @LSC.Button("plus", "Add instance", toolbar).click addInstance	new @LSC.Button("exchange", "Add message", toolbar).click addMessage		new @LSC.Button("trash", "Delete selection", toolbar).click lsc.deleteSelection	new @LSC.Button("cloudDown", "Download LSC", toolbar).click download		i0 = new @LSC.Instance("I/O", 0, @paper, lsc)	lsc.addInstance(i0)	lsc.update()	i1 = new @LSC.Instance("Control", 1, @paper, lsc)	lsc.addInstance(i1)	lsc.update()	i2 = new @LSC.Instance("Timer1", 2, @paper, lsc)	lsc.addInstance(i2)	lsc.update()	i3 = new @LSC.Instance("Timer2", 3, @paper, lsc)	lsc.addInstance(i3)	lsc.update()	m = new @LSC.Message("helloWorld()", i0, i1, 0, lsc)	lsc.addMessage(m)	lsc.update()	m = new @LSC.Message("replyMessage()", i1, i0, 0, lsc)	lsc.addMessage(m)	lsc.update()	m = new @LSC.Message("helloWorld2()", i0, i1, 0, lsc)	lsc.addMessage(m)	lsc.update()	m = new @LSC.Message("hest", i1, i2, 0, lsc)	lsc.addMessage(m)	lsc.update()	m = new @LSC.Message("test", i2, i1, 0, lsc)	lsc.addMessage(m)	lsc.update()</script></head><body><div id="chartlist"></div><div id="workspace"></div><div id="log" style="position: absolute; left: 10px; top: 100%;"></div></body></html>